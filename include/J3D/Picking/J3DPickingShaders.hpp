#pragma once

#include <string>

namespace J3D {
    namespace Picking {
        static const char* VtxShader =
            "#version 460\n\n"
            "// Input attributes\n"
            "layout (location = 9) in vec4 aPos;\n\n"
			"// Represents a hardware light source.\n"
			"struct GXLight {\n"
			"\tvec4 Position;\n"
			"\tvec4 Direction;\n"
			"\tvec4 Color;\n"
			"\tvec4 AngleAtten;\n"
			"\tvec4 DistAtten;\n"
			"};\n\n"
			"// This UBO contains data that doesn't change between vertices or materials.\n"
			"layout(std140, binding = 0) uniform uSharedData {\n"
			"\tmat4 Proj;\n"
			"\tmat4 View;\n"
			"\tmat4 Model;\n\n"
			"\tvec4 TevColor[4];\n"
			"\tvec4 KonstColor[4];\n\n"
			"\tGXLight Lights[8];\n"
			"\tmat4 Envelopes[512];\n"
			"\tmat4 TexMatrices[10];\n"
			"\tmat4 IndTexMatrices[10];\n"
			"\tuint BillboardType;\n"
			"\tuint ModelId;\n"
			"\tuint MaterialId;\n"
			"\tvec4 HighlightColor;\n"
			"};\n\n"
			"vec3 CalculateMatrix() {\n"
			"\tmat4 envelopeMtx = View * Model * Envelopes[int(aPos.w)];\n\n"
			"\tif (BillboardType == 0 || BillboardType == 3) {\n"
			"\t\treturn (envelopeMtx * vec4(aPos.xyz, 1.0)).xyz;\n"
			"\t}\n\n"
			"\tmat4 bboardMtx = mat4(1.0);\n\n"
			"\tfloat mx = envelopeMtx[0][0] * envelopeMtx[0][0] + envelopeMtx[0][1] * envelopeMtx[0][1] + envelopeMtx[0][2] * envelopeMtx[0][2];\n"
			"\tfloat my = envelopeMtx[1][0] * envelopeMtx[1][0] + envelopeMtx[1][1] * envelopeMtx[1][1] + envelopeMtx[1][2] * envelopeMtx[1][2];\n"
			"\tfloat mz = envelopeMtx[2][0] * envelopeMtx[2][0] + envelopeMtx[2][1] * envelopeMtx[2][1] + envelopeMtx[2][2] * envelopeMtx[2][2];\n"
			"\tif (BillboardType == 1) {\n"
			"\t\tbboardMtx[0][0] = mx;\n"
			"\t\tbboardMtx[0][1] = 0.0;\n"
			"\t\tbboardMtx[0][2] = 0.0;\n\n"
			"\t\tbboardMtx[1][0] = 0.0;\n"
			"\t\tbboardMtx[1][1] = my;\n"
			"\t\tbboardMtx[1][2] = 0.0;\n\n"
			"\t\tbboardMtx[2][0] = 0.0;\n"
			"\t\tbboardMtx[2][1] = 0.0;\n"
			"\t\tbboardMtx[2][2] = mz;\n"
			"\t}\n"
			"\telse {\n"
			"\t\tvec3 vs = normalize(vec3(0.0, -envelopeMtx[1][2], envelopeMtx[1][1]));\n\n"
			"\t\tbboardMtx[0][0] = mx;\n"
			"\t\tbboardMtx[0][1] = 0.0;\n"
			"\t\tbboardMtx[0][2] = 0.0;\n\n"
			"\t\tbboardMtx[1][0] = envelopeMtx[1][0];\n"
			"\t\tbboardMtx[1][1] = envelopeMtx[1][1];\n"
			"\t\tbboardMtx[1][2] = envelopeMtx[1][2];\n\n"
			"\t\tbboardMtx[2][0] = 0.0;\n"
			"\t\tbboardMtx[2][1] = vs.y * mz;\n"
			"\t\tbboardMtx[2][2] = vs.z * mz;\n"
			"\t}\n\n"
			"\tbboardMtx[3][0] = envelopeMtx[3][0];\n"
			"\tbboardMtx[3][1] = envelopeMtx[3][1];\n"
			"\tbboardMtx[3][2] = envelopeMtx[3][2];\n\n"
			"\treturn (bboardMtx * vec4(aPos.xyz, 1.0)).xyz;\n"
			"}\n\n"
			"void main() {\n"
			"\tgl_Position = Proj * vec4(CalculateMatrix(), 1.0);"
			"}\n";

        static const char* FragShader =
			"#version 460\n\n"
            "// Final output value\n"
			"out uint OutValue;\n\n"
			"// Represents a hardware light source.\n"
			"struct GXLight {\n"
			"\tvec4 Position;\n"
			"\tvec4 Direction;\n"
			"\tvec4 Color;\n"
			"\tvec4 AngleAtten;\n"
			"\tvec4 DistAtten;\n"
			"};\n\n"
			"// This UBO contains data that doesn't change between vertices or materials.\n"
			"layout(std140, binding = 0) uniform uSharedData {\n"
			"\tmat4 Proj;\n"
			"\tmat4 View;\n"
			"\tmat4 Model;\n\n"
			"\tvec4 TevColor[4];\n"
			"\tvec4 KonstColor[4];\n\n"
			"\tGXLight Lights[8];\n"
			"\tmat4 Envelopes[512];\n"
			"\tmat4 TexMatrices[10];\n"
			"\tmat4 IndTexMatrices[10];\n"
			"\tuint BillboardType;\n"
			"\tuint ModelId;\n"
			"\tuint MaterialId;\n"
			"\tvec4 HighlightColor;\n"
			"};\n\n"
			"vec4 VecS10ToFloat(ivec4 a) {\n"
			"\tfloat red = (a.r & 0xFF) / 255.0;\n"
			"\tfloat grn = (a.g & 0xFF) / 255.0;\n"
			"\tfloat blu = (a.b & 0xFF) / 255.0;\n"
			"\tfloat alf = (a.a & 0xFF) / 255.0;\n\n"
			"\treturn vec4(red, grn, blu, alf);\n"
			"}\n\n"
			"void main() {\n"
			"\tOutValue = (ModelId << 16) | MaterialId;\n"
			"}\n";
    }
}
